{"version":3,"sources":["utils/Auth.js","App.js","serviceWorker.js","index.js"],"names":["Brand","React","Component","Form","props","state","authorize","handleClick","bind","e","this","setState","console","log","className","name","type","placeholder","href","onClick","Footer","Auth","aria-hidden","Information","id","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAEMA,G,uLAEJ,OACC,kC,GAHiBC,IAAMC,YAQpBC,E,YACL,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACZC,WAAW,GAEZ,EAAKC,YAAc,EAAKA,YAAYC,OALnB,E,yEAONC,GACXC,KAAKC,SAAS,CAACL,WAAW,IAE1BM,QAAQC,IAAIH,KAAKL,MAAMC,a,+BAGvB,OACC,yBAAKQ,UAAU,SAEY,IAAzBJ,KAAKL,MAAMC,UACV,yBAAKQ,UAAU,UACd,8BACC,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,kBAC7C,2BAAOF,KAAK,WAAWC,KAAK,OAAOC,YAAY,cAC/C,2BAAOF,KAAK,YAAYC,KAAK,OAAOC,YAAY,eAChD,2BAAOF,KAAK,aAAaC,KAAK,OAAOC,YAAY,gBACjD,2BAAOF,KAAK,WAAWC,KAAK,OAAOC,YAAY,cAC/C,2BAAOF,KAAK,QAAQC,KAAK,OAAOC,YAAY,iBAC5C,2BAAOF,KAAK,WAAWC,KAAK,WAAWC,YAAY,aACnD,yEAA8C,uBAAGC,KAAK,IAAR,SAA9C,QAAuE,uBAAGA,KAAK,IAAR,mBACvE,4BAAQC,QAAST,KAAKH,aAAtB,aAED,iDAGD,yBAAKO,UAAU,SACd,8BACC,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,kBAC7C,2BAAOF,KAAK,WAAWC,KAAK,OAAOC,YAAY,cAC/C,0CAED,sD,GAvCYhB,IAAMC,WA+CzB,SAASkB,IACR,OACC,8B,IAecC,E,iLATd,OACC,yBAAKP,UAAU,QACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACM,EAAD,W,GANenB,IAAMC,WC5DzB,SAASkB,IACR,OACC,yBAAKN,UAAU,UACd,uBAAGA,UAAU,aAAaQ,cAAY,SACtC,uBAAGR,UAAU,aAAaQ,cAAY,SACtC,uBAAGR,UAAU,cAAcQ,cAAY,U,IAIpCC,E,iLAEJ,OACC,yBAAKC,GAAG,cAAcV,UAAU,oB,GAHTb,IAAMC,WA2BjBuB,E,iLAhBb,OACC,6BACC,yBAAKX,UAAU,QACd,uBAAGI,KAAK,qCACP,yBAAKJ,UAAU,OAAOY,IAAI,kPAAkPC,IAAI,cAEjR,uBAAGT,KAAK,gBAAR,aAED,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAZcjB,IAAMC,WCTJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.6d64ad0f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Brand extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nclass Form extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tauthorize: false\r\n\t\t}\r\n\t\tthis.handleClick = this.handleClick.bind();\r\n\t}\r\n\thandleClick(e){\r\n\t\tthis.setState({authorize: true});\r\n\t\t//e.preventDefault();\r\n\t\tconsole.log(this.state.authorize);\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"auth\">\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.authorize === false ? (\r\n\t\t\t\t\t\t<div className=\"signup\">\r\n\t\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t\t<input name=\"email\" type=\"email\" placeholder=\"Email Address\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"username\" type=\"text\" placeholder=\"User Name\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"firstname\" type=\"text\" placeholder=\"First Name\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"middlename\" type=\"text\" placeholder=\"Middle Name\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"lastname\" type=\"text\" placeholder=\"Last Name\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"phone\" type=\"text\" placeholder=\"phone number\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"password\" type=\"password\" placeholder=\"password\"/>\r\n\t\t\t\t\t\t\t\t<p>By registering an account you agree to the <a href=\"\">terms</a> and <a href=\"\">privacy policy</a></p>\r\n\t\t\t\t\t\t\t\t<button onClick={this.handleClick}>Register</button>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t<button> Or, sign In</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<div className=\"sigin\">\r\n\t\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t\t<input name=\"email\" type=\"email\" placeholder=\"Email Address\"/>\r\n\t\t\t\t\t\t\t\t<input name=\"username\" type=\"text\" placeholder=\"User Name\"/>\r\n\t\t\t\t\t\t\t\t<button>login</button>\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t<button> Or, sign Up</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nfunction Footer(){\r\n\treturn(\r\n\t\t<div>\r\n\t\t</div>\r\n\t);\r\n}\r\nclass Auth extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"auth\">\r\n\t\t\t\t<Brand />\r\n\t\t\t\t<Form />\r\n\t\t\t\t<Footer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n export default Auth;","import React from 'react';\r\nimport './css/App.css';\r\nimport Auth from './utils/Auth';\r\nfunction Footer(){\r\n\treturn(\r\n\t\t<div className=\"footer\">\r\n\t\t\t<i className=\"fa fa-home\" aria-hidden=\"true\"></i>\r\n\t\t\t<i className=\"fa fa-bell\" aria-hidden=\"true\"></i>\r\n\t\t\t<i className=\"fa fa-inbox\" aria-hidden=\"true\"></i>\r\n\t\t</div>\r\n\t)\r\n}\r\nclass Information extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"information\" className=\"information\">\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nclass App extends React.Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t<a href=\"https://www.facebook.com/kipsaiya\">\r\n\t\t\t\t\t\t<img className=\"logo\" src=\"https://z-p3-scontent.fmba2-1.fna.fbcdn.net/v/t1.0-9/23167881_990458404428642_8488902050794893724_n.jpg?_nc_cat=100&_nc_sid=85a577&_nc_ohc=vX9r-WZxpxsAX_KM18J&_nc_ht=z-p3-scontent.fmba2-1.fna&oh=8939be5b86d49552a7dceda9a8d87398&oe=5E9738FA\" alt=\"kipsaiya\"/>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href=\"#information\">Kipsaiya</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Information />\r\n\t\t\t\t<Auth />\r\n\t\t\t\t<Footer />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}